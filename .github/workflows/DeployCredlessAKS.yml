name: Deploy AKS sample
#on: [push]
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for deployment'
        type: environment
        required: true
      appName:
        description: 'Name of app'
        type: string
        required: true

permissions:
      id-token: write
      contents: read

jobs: 
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint code
        run: |
          az bicep build --file ./credless-in-azure-samples/part-4/main.bicep
  
  Validate:
    runs-on: ubuntu-latest
    needs: lint
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v2
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Run preflight validation'
        uses: azure/arm-deploy@v1
        with: 
          scope: subscription
          region: norwayeast
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          deploymentName: ${{ github.run_number }}         
          template: ./credless-in-azure-samples/part-4/main.bicep 
          parameters: ./credless-in-azure-samples/part-4/azuredeploy.${{ github.event.inputs.environment }}.parameters.json env=${{ github.event.inputs.environment }}
          deploymentMode: Validate
  
  What-if:
    runs-on: ubuntu-latest
    needs: Validate
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v2
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: 'Run what-if'
        uses: azure/cli@v1      
        with: 
          inlineScript: |
            az deployment sub what-if --location norwayeast \
              --name ${{ github.run_number }} \
              --template-file ./credless-in-azure-samples/part-4/main.bicep  \
              --parameters ./credless-in-azure-samples/part-4/azuredeploy.${{ github.event.inputs.environment }}.parameters.json env=${{ github.event.inputs.environment }} 

  Deploy:
    runs-on: ubuntu-latest
    needs: What-if
    environment: ${{ github.event.inputs.environment }}
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Azure AD Admin Group
      id: groupcreate
      run: |
        export appName=${{ github.event.inputs.appName }}
        adminGroupId=$(az ad group create --display-name $appName --mail-nickname $appName --query objectId)
        echo "::set-output name=adminGroupId::$adminGroupId"

    - name: 'Deploy AKS'
      uses: azure/cli@v1      
      with: 
        inlineScript: |
          az deployment sub create --location norwayeast \
            --name ${{ github.run_number }} \
            --template-file ./credless-in-azure-samples/part-4/main.bicep  \
            --parameters ./credless-in-azure-samples/part-4/azuredeploy.${{ github.event.inputs.environment }}.parameters.json env=${{ github.event.inputs.environment }} adminGroupId=${{ steps.groupcreate.outputs.adminGroupId }}
    
    - name: Assign RBAC
      id: rbac
      run: |
        aksId=$(az aks show -g rg-${{ github.event.inputs.environment }}-aks -n ${{ github.event.inputs.environment }}-aks --query id -o tsv)
        az role assignment create --role "Azure Kubernetes Service Cluster Admin Role" --assignee ${{ secrets.AZURE_CLIENT_ID }} --scope $aksId
    
    - name: Get OIDCUrl
      id: oidc
      run: |
        oidcUrl=$(az aks show --resource-group rg-${{ github.event.inputs.environment }}-aks --name ${{ github.event.inputs.environment }}-aks --query "oidcIssuerProfile.issuerUrl" -o tsv)
        echo "::set-output name=oidcUrl::$oidcUrl"
    
    - name: Get AKS Creds
      id: getakscreds
      run: |
        az aks get-credentials --resource-group rg-${{ github.event.inputs.environment }}-aks --name ${{ github.event.inputs.environment }}-aks

    - name: Get kubelogn
      run: |
        brew install Azure/kubelogin/kubelogin

    - name: Convert kubeconfig
      run: kubelogin convert-kubeconfig -l workloadidentity

    #- name: Set AKS context
    #  uses: azure/aks-set-context@v2.0
    #  with:
    #    resource-group: rg-${{ github.event.inputs.environment }}-aks
    #    cluster-name: ${{ github.event.inputs.environment }}-aks

    - name: Retrieve id-token and store
      run: |
        IDTOKEN=$(curl -sSL -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://AzureADTokenExchange" | jq -r '.value')
        echo $IDTOKEN > ${RUNNER_TEMP}/.token
        jwtd() {
            if [[ -x $(command -v jq) ]]; then
                jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
                echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
            fi
        }
        jwtd $IDTOKEN
        echo "::set-output name=idToken::${IDTOKEN}"

    #- name: Run Helm
    #  id: helm
    #  run: |
    #    helm repo add azure-workload-identity https://azure.github.io/azure-workload-identity/charts
    #    helm repo update
    #    helm install workload-identity-webhook azure-workload-identity/workload-identity-webhook --namespace azure-workload-identity-system --create-namespace --set azureTenantID="${{ secrets.AZURE_TENANT_ID }}"

    # - name: Install workload-identity-webhook
    #  uses: danielr1996/envsubst-action@1.0.0
    #  env:
    #      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    #  with:
    #      input: https://github.com/Azure/azure-workload-identity/releases/download/v0.9.0/azure-wi-webhook.yaml
    #      output: webhook.yaml

    - name: apply webhook.yaml
      env:
        AZURE_AUTHORITY_HOST: https://login.microsoftonline.com/
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        export AZURE_FEDERATED_TOKEN_FILE=${RUNNER_TEMP}/.token
        kubectl apply -f ./credless-in-azure-samples/part-4/azure-wi-webhook.yaml

    #- name: kubectl
    #  uses: Azure/k8s-deploy@v3.1
    #  with:
    #    action: deploy
    #    manifests: |
    #      ./credless-in-azure-samples/part-4/azure-wi-webhook.yaml